{"version":3,"file":"extension.js","mappings":"mLAOA,oBAAyBA,GAIxBC,QAAQC,IAAI,uCACZF,EAAQG,cAAcC,MAAK,eAC5B,EAGA,wBAA8B,EAb9B,iB,iECUA,qBACI,OAAO,EAAAC,UAAUC,+BACb,CAAC,aAAc,aAAc,kBAAmB,mBAChD,CACI,sBAAAC,CACIC,EACAC,EACAC,EACAC,GAEA,MAEMC,EAFWJ,EAASK,OAAOJ,EAASK,MAAMC,KACxBC,MAAM,EAAGP,EAASQ,WACzBC,MAAM,mBACvB,IAAKN,IAAM,SAASO,WAAWP,EAAE,GAAGQ,eAChC,OAEJ,MAAMC,EAAcT,EAAE,GAChBU,EAAQ,IAAI,EAAAC,MACdd,EAASK,KACTL,EAASQ,UAAYI,EAAYG,OACjCf,EAASK,KACTL,EAASQ,WAmDb,MAhDgE,CAE5D,CACIQ,MAAO,kBACPC,KAAM,IAAI,EAAAC,cACN,6CAGR,CACIF,MAAO,0BACPC,KAAM,IAAI,EAAAC,cACN,qDAGR,CACIF,MAAO,uBACPC,KAAM,IAAI,EAAAC,cACN,kDAGR,CACIF,MAAO,mBACPC,KAAM,IAAI,EAAAC,cACN,8CAGR,CACIF,MAAO,2BACPC,KAAM,IAAI,EAAAC,cACN,sDAGR,CACIF,MAAO,eACPC,KAAM,IAAI,EAAAC,cAEN,0CAGR,CACIF,MAAO,aACPC,KAAM,IAAI,EAAAC,cAEN,2CAKIC,KAAI,EAAGH,QAAOC,WAC1B,MAAMG,EAAO,IAAI,EAAAC,eAAeL,EAAO,EAAAM,mBAAmBC,SAI1D,OAHAH,EAAKI,WAAaP,EAClBG,EAAKK,WAAaT,EAClBI,EAAKP,MAAQA,EACNO,CAAI,GAEnB,GAEA,IAAK,IAAK,IAAK,IAAK,IAAK,IAErC,EA/FA,c,UCDAM,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://export-autocomplete/./src/extension.ts","webpack://export-autocomplete/./src/frontware/providers/getCompletionItemProvider.ts","webpack://export-autocomplete/external commonjs \"vscode\"","webpack://export-autocomplete/webpack/bootstrap","webpack://export-autocomplete/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport getCompletionItemProvider from './frontware/providers/getCompletionItemProvider';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log(\"Export auto complete is now active!\");\n\tcontext.subscriptions.push(getCompletionItemProvider());\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n\n","import * as path from \"path\";\nimport {\n    languages,\n    CompletionItem,\n    CompletionItemKind,\n    SnippetString,\n    TextDocument,\n    Position,\n    CancellationToken,\n    CompletionContext,\n    Range\n} from \"vscode\";\n\nexport default function getCompletionItemProvider() {\n    return languages.registerCompletionItemProvider(\n        [\"javascript\", \"typescript\", \"javascriptreact\", \"typescriptreact\"],\n        {\n            provideCompletionItems(\n                document: TextDocument,\n                position: Position,\n                _token: CancellationToken,\n                _context: CompletionContext\n            ) {\n                const lineText = document.lineAt(position.line).text;\n                const prefix = lineText.slice(0, position.character);\n                const m = prefix.match(/\\b([A-Za-z_]*)$/);\n                if (!m || !\"export\".startsWith(m[1].toLowerCase())) {\n                    return undefined;\n                }\n                const currentWord = m[1];\n                const range = new Range(\n                    position.line,\n                    position.character - currentWord.length,\n                    position.line,\n                    position.character\n                );\n\n                const snippets: Array<{ label: string; body: SnippetString }> = [\n    \n                    {\n                        label: \"export function\",\n                        body: new SnippetString(\n                            \"export function ${1:${TM_FILENAME_BASE}}\"\n                        ),\n                    },\n                    {\n                        label: \"export default function\",\n                        body: new SnippetString(\n                            \"export default function ${1:${TM_FILENAME_BASE}}\"\n                        ),\n                    },\n                    {\n                        label: \"export default class\",\n                        body: new SnippetString(\n                            \"export default class ${1:${TM_FILENAME_BASE}}\"\n                        ),\n                    },\n                    {\n                        label: \"export interface\",\n                        body: new SnippetString(\n                            \"export interface ${1:${TM_FILENAME_BASE}}\"\n                        ),\n                    },\n                    {\n                        label: \"export default interface\",\n                        body: new SnippetString(\n                            \"export default interface ${1:${TM_FILENAME_BASE}}\"\n                        ),\n                    },\n                    {\n                        label: \"export const\",\n                        body: new SnippetString(\n                            // 1 = symbol name (defaults to filename), 2 = initializer, 0 = final cursor\n                            \"export const ${1:${TM_FILENAME_BASE}}\"\n                        ),\n                    },\n                    {\n                        label: \"export var\",\n                        body: new SnippetString(\n                            // 1 = symbol name (defaults to filename), 2 = initializer, 0 = final cursor\n                            \"export const ${1:${TM_FILENAME_BASE}}\"\n                        ),\n                    },\n                ];\n\n                return snippets.map(({ label, body }) => {\n                    const item = new CompletionItem(label, CompletionItemKind.Snippet);\n                    item.insertText = body;\n                    item.filterText = label;\n                    item.range = range;\n                    return item;\n                });\n            },\n        },\n        ...[\"e\", \"x\", \"p\", \"o\", \"r\", \"t\"] // Trigger completion provider early\n    );\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","subscriptions","push","languages","registerCompletionItemProvider","provideCompletionItems","document","position","_token","_context","m","lineAt","line","text","slice","character","match","startsWith","toLowerCase","currentWord","range","Range","length","label","body","SnippetString","map","item","CompletionItem","CompletionItemKind","Snippet","insertText","filterText","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}